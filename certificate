(define (certificate workshop-list)
  (define (has-conflict? workshop1 workshop2)
    (let ((day1 (cadr workshop1))
          (start1 (cadddr workshop1))
          (stop1 (cadddr workshop1))
          (day2 (cadr workshop2))
          (start2 (cadddr workshop2))
          (stop2 (cadddr workshop2)))
      (and (= day1 day2)
           (or (and (<= start1 start2) (< start2 stop1))
               (and (<= start2 start1) (< start1 stop2))))))
  
  (let ((credits (let loop ((ws workshop-list) (total 0))
                    (if (null? ws)
                        total
                        (loop (cdr ws) (+ total (caddr (car ws)))))))
        (workshop-pairs (let ((workshop-list-length (length workshop-list)))
                          (let loop ((i 1) (j 2) (pairs '()))
                            (if (>= i workshop-list-length)
                                pairs
                                (if (>= j workshop-list-length)
                                    (loop (+ i 1) (+ i 2) pairs)
                                    (loop i (+ j 1) (cons (list (list-ref workshop-list (- i 1))
                                                               (list-ref workshop-list (- j 1)))
                                                            pairs))))))))
    (and (>= credits 5)
         (not (let loop ((pairs workshop-pairs) (conflict? #f))
                (if conflict?
                    conflict?
                    (if (null? pairs)
                        #f
                        (loop (cdr pairs)
                              (let ((pair (car pairs)))
                                (if (has-conflict? (car pair) (cadr pair))
                                    #t
                                    conflict?))))))))))
