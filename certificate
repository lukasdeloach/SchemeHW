(define (certificate lst)
  (define (sort-by-day lst)
    (cond ((<= (length lst) 1) lst)
          (else
            (let ((midpoint (quotient (length lst) 2)))
              (merge (sort-by-day (take lst midpoint))
                     (sort-by-day (drop lst midpoint)))))))
  
  (define (merge lst1 lst2)
    (cond ((null? lst1) lst2)
          ((null? lst2) lst1)
          ((< (day (car lst1)) (day (car lst2)))
            (cons (car lst1) (merge (cdr lst1) lst2)))
          ((= (day (car lst1)) (day (car lst2)))
            (cond ((< (start-time (car lst1)) (start-time (car lst2)))
                    (cons (car lst1) (merge (cdr lst1) lst2)))
                  (else
                    (cons (car lst2) (merge lst1 (cdr lst2))))))
          (else
            (cons (car lst2) (merge lst1 (cdr lst2))))))

  (define (check-overlapping lst)
    (cond ((null? lst) #t)
          ((null? (cdr lst)) #t)
          ((overlap? (car lst) (cadr lst)) #f)
          (else
            (check-overlapping (cdr lst)))))

  (let ((sorted-lst (sort-by-day lst)))
    (and (>= (credits-sum sorted-lst) 5)
         (check-overlapping sorted-lst))))

(define (day course)
  (list-ref course 1))

(define (start-time course)
  (list-ref course 3))

(define (end-time course)
  (list-ref course 4))

(define (overlap? course1 course2)
  (and (= (day course1) (day course2))
       (or (and (<= (start-time course1) (start-time course2))
                (>= (end-time course1) (start-time course2)))
           (and (<= (start-time course2) (start-time course1))
                (>= (end-time course2) (start-time course1))))))

(define (take lst n)
  (cond ((= n 0) '())
        (else (cons (car lst) (take (cdr lst) (- n 1))))))

(define (drop lst n)
  (cond ((= n 0) lst)
        (else (drop (cdr lst) (- n 1)))))

(define (credits course)
  (list-ref course 2))

(define (credits-sum lst)
  (apply + (map credits lst)))

